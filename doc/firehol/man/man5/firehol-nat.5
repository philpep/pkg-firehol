.TH "firehol\-nat" "5" "Built 22 Nov 2016" "FireHOL Reference" "3.0.2"
.nh
.SH NAME
.PP
firehol\-nat \- set up NAT and port redirections
.SH SYNOPSIS
.PP
{ nat to\-destination | dnat [to] } \f[I]ipaddr\f[][:\f[I]port\f[]]
[random] [persistent] [id \f[I]id\f[]] [at \f[I]chain\f[]]
[\f[I]rule\-params\f[]]
.PP
{ nat to\-source | snat [to] } \f[I]ipaddr\f[][:\f[I]port\f[]] [random]
[persistent] [id \f[I]id\f[]] [at \f[I]chain\f[]]
[\f[I]rule\-params\f[]]
.PP
{ nat redirect\-to | redirect [to] } \f[I]port\f[][\-\f[I]range\f[]]
[random] [id \f[I]id\f[]] [at \f[I]chain\f[]] [\f[I]rule\-params\f[]]
.SH DESCRIPTION
.PP
Destination NAT is provided by \f[C]nat\ to\-destination\f[] and its
synonym \f[C]dnat\f[].
.PP
Source NAT is provided by \f[C]nat\ to\-source\f[] and its synonym
\f[C]snat\f[].
.PP
Redirection to a port on the local host is provided by
\f[C]nat\ redirect\-to\f[] and its synonym \f[C]redirect\f[].
.PP
The \f[I]port\f[] part of the new address is optional with SNAT and
DNAT; if not specified it will not be changed.
.PP
When you apply NAT to a packet, the Linux kernel will track the changes
it makes, so that when it sees replies the transformation will be
applied in the opposite direction.
For instance if you changed the destination port of a packet from 80 to
8080, when a reply comes back, its source is set as 80.
This means the original sender is not aware a transformation is
happening.
.PP
This means that NAT is only applied on the first packet of each
connection (the nat FireHOL helper always appends \f[C]state\ NEW\f[] to
NAT statements).
.PP
The NAT helper can be used to setup load balancing.
Check the section BALANCING below.
.RS
.PP
\f[B]Note\f[]
.PP
The \f[I]rule\-params\f[] are used only to determine the traffic that
will be matched for NAT in these commands, not to permit traffic to
flow.
.PP
Applying NAT does not automatically create rules to allow the traffic to
pass.
You will still need to include client or server entries in an interface
or router to allow the traffic.
.PP
When using \f[C]dnat\f[] or \f[C]redirect\f[], the transformation is in
the PREROUTING chain of the NAT table and happens before normal rules
are matched, so your client or server rule should match the "modified"
traffic.
.PP
When using \f[C]snat\f[], the transformation is in the POSTROUTING chain
of the NAT table and happens after normal rules are matched, so your
client or server rule should match the "unmodified" traffic.
.PP
See the netfilter flow
diagram (http://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg)
if you would like to see how network packets are processed by the kernel
in detail.
.RE
.PP
The \f[C]at\f[] keyword allows setting a different chain to attach the
rules.
For \f[C]dnat\f[] and \f[C]redirect\f[] the default is PREROUTING, but
OUTPUT is also supported.
For \f[C]snat\f[] the default is POSTROUTING, but INPUT is also
supported.
.PP
\f[C]random\f[] will randomise the port mapping involved, to ensure the
ports used are not predictable.
.PP
\f[C]persistent\f[] is used when the statement is given alternatives
(i.e.
many destination servers for \f[C]dnat\f[], many source IPs for
\f[C]snat\f[], many ports for \f[C]redirect\f[]).
It will attempt to keep each client on the same nat map.
See below for more information about persistence.
.PP
The \f[C]nat\f[] helper takes one of the following sub\-commands:
.TP
.B to\-destination \f[I]ipaddr\f[][:\f[I]port\f[]]
Defines a Destination NAT (DNAT).
Commonly thought of as port\-forwarding (where packets destined for the
firewall with a given port and protocol are sent to a different IP
address and possibly port), DNAT is much more flexible in that any
number of parameters can be matched before the destination information
is rewritten.
.RS
.PP
\f[I]ipaddr\f[][:\f[I]port\f[]] is the destination address to be set in
packets matching \f[I]rule\-params\f[].
.PP
If no rules are given, all forwarded traffic will be matched.
\f[C]outface\f[] should not be used in DNAT since the information is not
available at the time the decision is made.
.PP
\f[I]ipaddr\f[][:\f[I]port\f[]] accepts any \f[C]\-\-to\-destination\f[]
values that iptables(8) accepts.
Run \f[C]iptables\ \-j\ DNAT\ \-\-help\f[] for more information.
Multiple \f[I]ipaddr\f[][:\f[I]port\f[]] may be specified by separating
with spaces and enclosing with quotes.
.RE
.TP
.B to\-source \f[I]ipaddr\f[][:\f[I]port\f[]]
Defines a Source NAT (SNAT).
SNAT is similar to masquerading but is more efficient for static IP
addresses.
You can use it to give a public IP address to a host which does not have
one behind the firewall.
See also firehol\-masquerade(5).
.RS
.PP
\f[I]ipaddr\f[][:\f[I]port\f[]] is the source address to be set in
packets matching \f[I]rule\-params\f[].
.PP
If no rules are given, all forwarded traffic will be matched.
\f[C]inface\f[] should not be used in SNAT since the information is not
available at the time the decision is made.
.PP
\f[I]ipaddr\f[][:\f[I]port\f[]] accepts any \f[C]\-\-to\-source\f[]
values that iptables(8) accepts.
Run \f[C]iptables\ \-j\ SNAT\ \-\-help\f[] for more information.
Multiple \f[I]ipaddr\f[][:\f[I]port\f[]] may be specified by separating
with spaces and enclosing with quotes.
.RE
.TP
.B redirect\-to \f[I]port\f[][\-\f[I]range\f[]]
Redirect matching traffic to the local machine.
This is typically useful if you want to intercept some traffic and
process it on the local machine.
.RS
.PP
\f[I]port\f[][\-\f[I]range\f[]] is the port range (from\-to) or single
port that packets matching \f[I]rule\-params\f[] will be redirected to.
.PP
If no rules are given, all forwarded traffic will be matched.
\f[C]outface\f[] should not be used in REDIRECT since the information is
not available at the time the decision is made.
.RE
.SH BALANCING
.PP
NAT can balance multiple servers (or IPs in case of \f[C]snat\f[]) when
a range is specified.
This is handled by the kernel.
.PP
Example:
.IP
.nf
\f[C]
dnat4\ to\ 10.0.0.1\-10.0.0.10\ persistent\ proto\ tcp\ dst\ 1.1.1.1\ dport\ 80
\f[]
.fi
.PP
In the above example, the Linux kernel will give a \f[C]persistent\f[]
server to all the sockets of any single client.
.PP
FireHOL can also setup balancing using a round\-robin or weighted
average distribution of requests.
However \f[C]persistent\f[] cannot be used (the Linux kernel applies
persistence on a single NAT statement).
.SS Round Robin distribution
.PP
To enable round robin distribution, give multiple \f[C]to\f[] values,
space separated and enclosed in quotes, or comma separated.
.PP
Example:
.IP
.nf
\f[C]
\ dnat4\ to\ 10.0.0.1,10.0.0.2,10.0.0.3\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\ #\ or
\ dnat4\ to\ "10.0.0.1\ 10.0.0.2\ 10.0.0.3"\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\f[]
.fi
.PP
Ports can also be given per IP:
.IP
.nf
\f[C]
\ dnat4\ to\ 10.0.0.1:70,10.0.0.2:80,10.0.0.3:90\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\ #\ or
\ dnat4\ to\ "10.0.0.1:70\ 10.0.0.2:80\ 10.0.0.3:90"\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\f[]
.fi
.SS Weighted distribution
.PP
To enable weighted distribution, append a slash with the weight
requested for each entry.
.PP
FireHOL adds all the weights given and calculates the percentage of
traffic each entry should receive.
.PP
Example:
.IP
.nf
\f[C]
\ dnat4\ to\ 10.0.0.1/30,10.0.0.2/30,10.0.0.3/40\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\ #\ or
\ dnat4\ to\ "10.0.0.1/30\ 10.0.0.2/30\ 10.0.0.3/40"\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\ #\ or
\ dnat4\ to\ 10.0.0.1:70/30,10.0.0.2:80/30,10.0.0.3:90/40\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\ #\ or
\ dnat4\ to\ "10.0.0.1:70/30\ 10.0.0.2:80/30\ 10.0.0.3:90/40"\ proto\ tcp\ dst\ 1.1.1.1\ port\ 80
\f[]
.fi
.SS PERSISTENCE
.PP
The kernel supports persistence only if the NAT alternatives are
contiguous (i.e.
dnat to A\-B, snat to A\-B, redirect to 1000:1010, etc).
If they are contiguous, persistence is left at the kernel.
FireHOL does nothing.
.PP
If the alternatives are not contiguous, FireHOL will use the
\f[I]recent\f[] iptables module to apply persistence itself.
.PP
FireHOL supports mixed mode persistence.
For example, you can have something like this:
.IP
.nf
\f[C]
dnat\ to\ A\-B/70,C\-D/20,F/10\ persistence\ id\ mybalancer
\f[]
.fi
.PP
The above is a weighted distribution of persistence.
Group A\-B will get 70%, C\-D 20% and server F 10%.
.PP
Using the above, FireHOL will apply its persistence to pick one of the
groups A\-B, or C\-D, or F.
Once the group has been picked by FireHOL, the kernel will apply
persistence within the group, to pick the server that will handle the
request.
.PP
The FireHOL persistence works like this:
.IP "1." 3
A packet is received that should be NATed
.IP "2." 3
A lookup is made using the \f[I]recent\f[] module to find if it has been
seen before.
The source IP of packet is looked up.
.IP "3." 3
If it has been seen before, the connection is mapped the same way the
last time was mapped.
The \f[I]recent\f[] module is updated too.
.IP "4." 3
If it has not been seen before, the connection is mapped using the
distribution method specified.
The \f[I]recent\f[] module is updated too, to be ready for the next
connection.
.PP
The \f[I]recent\f[] module has a few limitations:
.IP "1." 3
It has lookup tables.
We need one lookup table for each member of of the NAT.
FireHOL uses the \f[C]id\f[] parameter and the definition of each
alternative in the NAT statement to form a name for the lookup table.
These lookup tables are persistent to firewall restarts, this is why
FireHOL requires from you to set an \f[C]id\f[].
.IP "2." 3
It can keep entries in its lookup tables for a given time.
FireHOL sets this to 3600 seconds.
You can control it by setting \f[C]FIREHOL_NAT_PERSISTENCE_SECONDS\f[].
.IP "3." 3
It has a limit on the number of entries in the lookup tables.
FireHOL cannot set this.
This is kernel module option.
The default is 200 entries.
.PP
Check this:
.PP
~~~~ # modinfo xt_recent filename:
/lib/modules/4.1.12\-gentoo/kernel/net/netfilter/xt_recent.ko alias:
ip6t_recent alias: ipt_recent license: GPL description: Xtables:
"recently\-seen" host matching author: Jan Engelhardt
<jengelh@medozas.de> author: Patrick McHardy <kaber@trash.net> depends:
x_tables intree: Y vermagic: 4.1.12\-gentoo SMP preempt mod_unload
modversions parm: ip_list_tot:number of IPs to remember per list (uint)
parm: ip_list_hash_size:size of hash table used to look up IPs (uint)
parm: ip_list_perms:permissions on /proc/net/xt_recent/* files (uint)
parm: ip_list_uid:default owner of /proc/net/xt_recent/* files (uint)
parm: ip_list_gid:default owning group of /proc/net/xt_recent/* files
(uint) parm: ip_pkt_list_tot:number of packets per IP address to
remember (max.
255) (uint) ~~~~
.IP
.nf
\f[C]
You\ have\ to\ consult\ your\ distribution\ documentation\ to\ set\ these.
You\ can\ find\ their\ current\ values\ by\ examining\ files\ found\ in
`/sys/module/xt_recent/parameters/`\ Unfortunately,\ these\ files
are\ not\ writable,\ so\ to\ change\ parameters\ you\ have\ unload\ and
reload\ the\ module\ (i.e.\ apply\ a\ firewall\ that\ does\ not\ use\ the
*recent*\ module,\ `rmmod\ xt_recent`,\ change\ the\ parameter,
re\-apply\ a\ firewall\ that\ uses\ the\ *recent*\ module).

Normaly,\ you\ will\ need\ a\ line\ in\ `/etc/modprobe.d/netfitler.conf`
like\ this:

~~~~
options\ xt_recent\ ip_list_tot=16384
~~~~

The\ number\ 16384\ I\ used\ is\ the\ max\ number\ of\ unique\ client\ IPs
I\ expect\ to\ have\ per\ hour\ (`FIREHOL_NAT_PERSISTENCE_SECONDS`)
for\ this\ service.

`ip_list_hash_size`\ is\ calculated\ by\ kernel\ when\ the\ module
is\ loaded\ to\ be\ bigger\ and\ up\ to\ twice\ `ip_list_tot`.
\f[]
.fi
.PP
Once you have the balancer running, you can find its lookup tables in
\f[C]/proc/net/xt_recent/\f[].
There you will find files starting with the \f[I]id\f[] parameter, one
file for every alternative of the NAT rule.
.SH EXAMPLES
.IP
.nf
\f[C]

\ #\ Port\ forwarding\ HTTP
\ dnat4\ to\ 192.0.2.2\ proto\ tcp\ dport\ 80

\ #\ Port\ forwarding\ HTTPS\ on\ to\ a\ different\ port\ internally
\ dnat4\ to\ 192.0.2.2:4443\ proto\ tcp\ dport\ 443

\ #\ Fix\ source\ for\ traffic\ leaving\ the\ firewall\ via\ eth0\ with\ private\ address
\ snat4\ to\ 198.51.100.1\ outface\ eth0\ src\ 192.168.0.0/24

\ #\ Transparent\ squid\ (running\ on\ the\ firewall)\ for\ some\ hosts
\ redirect4\ to\ 8080\ inface\ eth0\ src\ 198.51.100.0/24\ proto\ tcp\ dport\ 80

\ #\ Send\ to\ 192.0.2.1
\ #\ \ \-\ all\ traffic\ arriving\ at\ or\ passing\ through\ the\ firewall
\ nat4\ to\-destination\ 192.0.2.1

\ #\ Send\ to\ 192.0.2.1
\ #\ \ \-\ all\ traffic\ arriving\ at\ or\ passing\ through\ the\ firewall
\ #\ \ \-\ which\ WAS\ going\ to\ 203.0.113.1
\ nat4\ to\-destination\ 192.0.2.1\ dst\ 203.0.113.1

\ #\ Send\ to\ 192.0.2.1
\ #\ \ \-\ TCP\ traffic\ arriving\ at\ or\ passing\ through\ the\ firewall
\ #\ \ \-\ which\ WAS\ going\ to\ 203.0.113.1
\ nat4\ to\-destination\ 192.0.2.1\ proto\ tcp\ dst\ 203.0.113.1

\ #\ Send\ to\ 192.0.2.1
\ #\ \ \-\ TCP\ traffic\ arriving\ at\ or\ passing\ through\ the\ firewall
\ #\ \ \-\ which\ WAS\ going\ to\ 203.0.113.1,\ port\ 25
\ nat4\ to\-destination\ 192.0.2.1\ proto\ tcp\ dport\ 25\ dst\ 203.0.113.1
\f[]
.fi
.SH SEE ALSO
.IP \[bu] 2
firehol(1) \- FireHOL program
.IP \[bu] 2
firehol.conf(5) \- FireHOL configuration
.IP \[bu] 2
firehol\-interface(5) \- interface definition
.IP \[bu] 2
firehol\-router(5) \- router definition
.IP \[bu] 2
firehol\-params(5) \- optional rule parameters
.IP \[bu] 2
firehol\-masquerade(5) \- masquerade helper
.IP \[bu] 2
FireHOL Website (http://firehol.org/)
.IP \[bu] 2
FireHOL Online PDF Manual (http://firehol.org/firehol-manual.pdf)
.IP \[bu] 2
FireHOL Online Documentation (http://firehol.org/documentation/)
.IP \[bu] 2
NAT
HOWTO (http://www.netfilter.org/documentation/HOWTO/NAT-HOWTO-6.html)
.IP \[bu] 2
netfilter flow
diagram (http://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg)
.SH AUTHORS
FireHOL Team.
