.TH "firehol\-synproxy" "5" "Built 10 Jan 2016" "FireHOL Reference" "3.0.1"
.nh
.SH NAME
.PP
firehol\-synproxy \- configure synproxy
.SH SYNOPSIS
.PP
synproxy \f[I]type\f[] \f[I]rules\-to\-match\-request\f[]
\f[I]action\f[] [\f[I]action options\f[]]
.SH DESCRIPTION
.IP \[bu] 2
\f[B]type\f[] defines where the SYNPROXY will be attached.
It can be \f[C]input\f[] (or \f[C]in\f[]), \f[C]forward\f[] (or
\f[C]pass\f[]):
.RS 2
.IP \[bu] 2
use \f[C]input\f[] (or \f[C]in\f[]) when the IP of the real server is an
IP assigned to a physical interface of the machine (i.e.
the IP is at the firewall itself)
.IP \[bu] 2
use \f[C]forward\f[] (or \f[C]pass\f[]) when the IP of the real server
is routed by the machine (i.e.
SYNPROXY should look at the FORWARD chain for this traffic).
.RE
.IP \[bu] 2
\f[C]rules\ to\ match\ request\f[] are FireHOL optional rule parameters
and should match the original client REQUEST, before any destination
NAT.
\f[C]inface\f[] and \f[C]dst\f[] are required:
.RS 2
.IP \[bu] 2
\f[C]inface\f[] is one or more interfaces the REQUEST should be received
from
.IP \[bu] 2
\f[C]dst\f[] is the IP of the real server, as seen by the client (before
any destination NAT)
.RE
.IP \[bu] 2
\f[B]action\f[] defines how SYNPROXY will reach the real server and can
be:
.RS 2
.IP \[bu] 2
\f[C]accept\f[] to just allow the REQUEST reach the real server without
any destination NAT
.IP \[bu] 2
\f[C]dnat\ to\ IP:PORT\f[] or \f[C]dnat\ to\ IP1\-IP2:PORT1\-PORT2\f[]
or \f[C]dnat\ to\ IP\f[] or \f[C]dnat\ to\ :PORT\f[] to have SYNPROXY
reach a server on another machine in a DMZ (different IP and/or PORT
compared to the original request).
The synproxy statement supports everything supported by the dnat helper
(see firehol\-nat(5)).
.IP \[bu] 2
\f[C]redirect\ to\ PORT\f[] to divert the request to a port on the
firewall itself.
The synproxy statement supports everything supported by the redirect
helper (see firehol\-nat(5)).
.IP \[bu] 2
\f[C]action\ CUSTOM_ACTION\f[] to have any other FireHOL action
performed on the NEW socket.
Use the \f[C]action\f[] helper to define custom actions (see
[firehol\-action(5)][]).
.IP \[bu] 2
\f[C]action\ options\f[] are everything supported by FireHOL optional
rule parameters that should be applied only on the final action of SYN
packet from SYNPROXY to the real server.
For example this can be used to append \f[C]loglimit\ "TEXT"\f[] to have
something logged by iptables, or limit the concurrent sockets with
\f[C]connlimit\f[].
Generally, everything you can write on the same line after
\f[C]server\ http\ accept\f[] is also accepted here.
.RE
.SH BACKGROUND
.PP
SYNPROXY is a TCP SYN packets proxy.
It can be used to protect any TCP server (like a web server) from SYN
floods and similar DDos attacks.
.PP
SYNPROXY is a netfilter module, in the Linux kernel.
It is optimized to handle millions of packets per second utilizing all
CPUs available without any concurrency locking between the connections.
.PP
The net effect of this, is that the real servers will not notice any
change during the attack.
The valid TCP connections will pass through and served, while the attack
will be stopped at the firewall.
.PP
For more information on why you should use a SYNPROXY, check these
articles:
.IP \[bu] 2
http://rhelblog.redhat.com/2014/04/11/mitigate\-tcp\-syn\-flood\-attacks\-with\-red\-hat\-enterprise\-linux\-7\-beta/
.IP \[bu] 2
https://r00t\-services.net/knowledgebase/14/Homemade\-DDoS\-Protection\-Using\-IPTables\-SYNPROXY.html
.PP
SYNPROXY is included in the Linux kernels since version 3.12.
.SH HOW IT WORKS
.IP \[bu] 2
When a SYNPROXY is used, clients transparently get connected to the
SYNPROXY.
So the 3\-way TCP handshake happens first between the client and the
SYNPROXY:
.RS 2
.IP \[bu] 2
Clients send TCP SYN to server A
.IP \[bu] 2
At the firewall, when this packet arrives it is marked as UNTRACKED
.IP \[bu] 2
The UNTRACKED TCP SYN packet is then given to SYNPROXY
.IP \[bu] 2
SYNPROXY gets this and responds (as server A) with TCP SYN+ACK
(UNTRACKED)
.IP \[bu] 2
Client responds with TCP ACK (marked as INVALID or UNTRACKED in
iptables) which is also given to SYNPROXY
.RE
.IP \[bu] 2
Once a client has been connected to the SYNPROXY, SYNPROXY automatically
initiates a 3\-way TCP handshake with the real server, spoofing the SYN
packet so that the real server will see that the original client is
attempting to connect:
.RS 2
.IP \[bu] 2
SYNPROXY sends TCP SYN to real server A.
This is a NEW connection in iptables and happens on the OUTPUT chain.
The source IP of the packet is the IP of the client
.IP \[bu] 2
The real server A responds with SYN+ACK to the client
.IP \[bu] 2
SYNPROXY receives this and responds back to the server with ACK.
The connection is now marked as ESTABLISHED
.RE
.IP \[bu] 2
Once the connection has been established, SYNPROXY leaves the traffic
flow between the client and the server
.PP
So, SYNPROXY can be used for any kind of TCP traffic.
It can be used for both unencrypted and encrypted traffic, since it does
not interfere with the content itself.
.SH USE CASES
.PP
In FireHOL SYNPROXY support is implemented as a helper.
The \f[C]synproxy\f[] command can be used to set up any number of
SYNPROXYs.
.PP
FireHOL can set up SYNPROXY for any of these cases:
.IP "1." 3
\f[B]real server on the firewall itself, on the same port\f[] (e.g.
SYNPROXY on port 80, real server on port 80 too).
.IP "2." 3
\f[B]real server on the firewall itself, on a different port\f[] (e.g.
SYNPROXY on port 2200, real server on port 22).
.IP "3." 3
\f[B]real server on a different machine, without NAT\f[] (e.g.
SYNPROXY on a router catching traffic towards IP A, port 80 and real
server is at IP A port 80 too).
.IP "4." 3
\f[B]real server on a different machine, with NAT\f[] (e.g.
SYNPROXY on a router catching traffic towards IP A, port 80 and real
server is at IP 10.1.1.1 port 90).
.IP "5." 3
\f[B]screening incoming traffic that should never be sent to a real
server\f[] so that traps and dynamic blacklists can be created using
traffic that has been screened by SYNPROXY (eliminate "internet noise"
and spoofed packets).
.PP
So, generally, all cases are covered.
.SH DESIGN
.PP
The general guidelines for using \f[C]synproxy\f[] in FireHOL, are:
.IP "1." 3
\f[B]Design your firewall as you would normally do without SYNPROXY\f[]
.IP "2." 3
Test that it works without SYNPROXY.
Test especially the servers you want to protect.
They should be working too
.IP "3." 3
Add \f[C]synproxy\f[] statements for the servers you want to protect.
.PP
To achieve these requirements:
.IP "1." 3
The helper will automatically do everything needed for SYNPROXY to:
.RS 4
.IP \[bu] 2
receive the initial SYN packet from the client
.IP \[bu] 2
respond back to the client with SYN+ACK
.IP \[bu] 2
receive the first ACK packet from the client
.IP \[bu] 2
send the initial SYN packet to the server
.RE
.PP
There are cases where the above are very tricky to achieve.
You don\[aq]t need to match these in your \f[C]firehol.conf\f[].
The \f[C]synproxy\f[] helper will automatically take care of them.
However:
.RS
.PP
You do need the allow the flow of traffic between the real server and
the real client (as you normally do without a \f[C]synproxy\f[], with a
\f[C]client\f[], \f[C]server\f[], or \f[C]route\f[] statement in an
\f[C]interface\f[] or \f[C]router\f[] section).
.RE
.IP "2." 3
The helper will prevent the 3\-way TCP handshake between SYNPROXY and
the real server interact with other \f[B]destination NAT\f[] rules you
may have.
However for this to happen, make sure you place the \f[C]synproxy\f[]
statements above any destination NAT rules (\f[C]redirect\f[],
\f[C]dnat\f[], \f[C]transparent_squid\f[], \f[C]transparent_proxy\f[],
\f[C]tproxy\f[], etc).
So:
.RS
.PP
SYNPROXY will interact with destination NAT you have in
\f[C]firehol.conf\f[] \f[B]only\f[] if the \f[C]synproxy\f[] statements
are place below the destination NAT ones.
.PP
You normally do not need to have \f[C]synproxy\f[] interact with other
destination NAT rules.
The \f[C]synproxy\f[] helper will handle the destination NAT
(\f[C]dnat\f[] or \f[C]redirect\f[]) it needs by itself.
.PP
So \f[B]place \f[C]synproxy\f[] statements above all destination NAT
statements, unless you know what you are doing\f[].
.RE
.IP "3." 3
The helper will allow the 3\-way TCP handshake between SYNPROXY and the
real server interact with \f[B]source NAT\f[] rules you may have
(\f[C]snat\f[], \f[C]masquerade\f[]), since these may be needed to reach
the real server.
.SH LIMITATIONS
.IP "1." 3
Internally there are matches that are made without taking into account
the original \f[C]inface\f[].
So, in case different actions have to be taken depending on the
interface the request is received, \f[C]src\f[] should be added to
differentiate the traffic between the two flows.
.IP "2." 3
SYNPROXY does not inherit MARKs from the original request packets.
It should and it would make matching a lot easier, but it does not.
This means that for all packets generated by SYNPROXY, \f[C]inface\f[]
is lost.
.IP "3." 3
FireHOL internally uses a MARK to tag packets send from SYNPROXY to the
target server.
This is used for 3 reasons:
.RS 4
.IP \[bu] 2
isolate these packets from other destination NAT rules.
If they were not isolated from the destination NAT rules, then packets
from the SYNPROXY could be matched by a transparent proxy and enter your
web proxy.
They could be matched by a transparent proxy because they actually
originate from the local machine.
.IP \[bu] 2
isolate the same packets from the rest of the packet filtering rules.
Without this isolation, most probably the packets will have been dropped
since they come from lo.
.IP \[bu] 2
report if orphan synproxy packets are encountered.
So packets the FireHOL engine failed to match properly, should appear
with a iptables log saying "ORPHAN SYNPROXY\->SERVER".
If you don\[aq]t have such logs, everything works as expected.
.RE
.SH OTHER OPTIONS
.PP
You can change the TCP options used by \f[C]synproxy\f[] by setting the
variable \f[C]FIREHOL_SYNPROXY_OPTIONS\f[].
The default is this:
.IP
.nf
\f[C]
FIREHOL_SYNPROXY_OPTIONS="\-\-sack\-perm\ \-\-timestamp\ \-\-wscale\ 7\ \-\-mss\ 1460"
\f[]
.fi
.PP
If you want to see it in action in the iptables log, then enable
logging:
.IP
.nf
\f[C]
FIREHOL_SYNPROXY_LOG=1
\f[]
.fi
.PP
The default is disabled (0).
If you enable it, every step of the 3\-way setup between the client and
SYNPROXY and the SYN packet of SYNPROXY towards the real server will be
logged by iptables.
.PP
Using the variable \f[C]FIREHOL_CONNTRACK_LOOSE_MATCHING\f[] you can set
\f[C]net.netfilter.nf_conntrack_tcp_loose\f[].
FireHOL will automatically set this to 0 when a synproxy is set up.
.PP
Using the variable \f[C]FIREHOL_TCP_TIMESTAMPS\f[] you can set
\f[C]net.ipv4.tcp_timestamps\f[].
FireHOL will automatically set this to 1 when a synproxy is set up.
.PP
Using the variable \f[C]FIREHOL_TCP_SYN_COOKIES\f[] you can set
\f[C]net.ipv4.tcp_syncookies\f[].
FireHOL will automatically set this to 1 when a synproxy is set up.
.PP
On a busy server, you are advised to increase the maximum connection
tracker entries and its hash table size.
.IP \[bu] 2
Using the variable \f[C]FIREHOL_CONNTRACK_HASHSIZE\f[] you can set
\f[C]/sys/module/nf_conntrack/parameters/hashsize\f[].
.IP \[bu] 2
Using the variable \f[C]FIREHOL_CONNTRACK_MAX\f[] you can set
\f[C]net.netfilter.nf_conntrack_max\f[].
.PP
FireHOL will not alter these variables by itself.
.SH SYNPROXY AND DYNAMIC IP
.PP
By default the \f[C]synproxy\f[] helper requires from you to define a
\f[C]dst\ IP\f[] of the server that is to be protected.
This is required because the destination IP will be used to match the
SYN packet the synproxy sends to the server.
.PP
There is however another way that allows the use of synproxy in
environments where the IP of the server is unknown (like a dynamic IP
DSL):
.IP "1." 3
First you need to set \f[C]FIREHOL_SYNPROXY_EXCLUDE_OWNER=1\f[].
This will make synproxy not match packets that are generated by the
local machine, even if the process that generates them uses your public
IP (the packets in order to be matched they will need not have a UID or
GID).
.IP "2." 3
Next you will need to exclude you lan IPs by adding
\f[C]src\ not\ "${UNROUTABLE_IPS}"\f[] (or any other network you know
you use) to the synproxy statement.
.SH EXAMPLES
.PP
Protect a web server running on the firewall with IP 1.2.3.4, from
clients on eth0:
.IP
.nf
\f[C]
ipv4\ synproxy\ input\ inface\ eth0\ dst\ 1.2.3.4\ dport\ 80\ accept

interface\ eth0\ wan
\ \ \ \ server\ http\ accept
\f[]
.fi
.PP
Protect a web server running on port 90 on the firewall with IP 1.2.3.4,
from clients on eth0 that believe the web server is running on port 80:
.IP
.nf
\f[C]
server_myhttp_ports="tcp/90"
client_myhttp_ports="default"

ipv4\ synproxy\ input\ inface\ eth0\ dst\ 1.2.3.4\ dport\ 80\ redirect\ to\ 90

interface\ eth0\ wan
\ \ \ \ server\ myhttp\ accept\ #\ packet\ filtering\ works\ with\ the\ real\ ports
\f[]
.fi
.PP
Protect a web server running on another machine (5.6.7.8), while the
firewall is the router (without NAT):
.IP
.nf
\f[C]
ipv4\ synproxy\ forward\ inface\ eth0\ dst\ 5.6.7.8\ dport\ 80\ accept

router\ wan2lan\ inface\ eth0\ outface\ eth1
\ \ \ \ server\ http\ accept\ dst\ 5.6.7.8
\f[]
.fi
.PP
Protect a web server running on another machine in a DMZ (public IP is
1.2.3.4 on eth0, web server IP is 10.1.1.1 on eth1):
.IP
.nf
\f[C]
ipv4\ synproxy\ input\ inface\ eth0\ \\
\ \ \ \ dst\ 1.2.3.4\ dport\ 80\ dnat\ to\ 10.1.1.1

router\ wan2lan\ inface\ eth0\ outface\ eth1
\ \ \ \ server\ http\ accept\ dst\ 10.1.1.1
\f[]
.fi
.PP
Note that we used \f[C]input\f[] not \f[C]forward\f[], because the
firewall has the IP 1.2.3.4 on its eth0 interface.
The client request is expected on input.
.PP
Protect an array of 10 web servers running on 10 other machines in a DMZ
(public IP is 1.2.3.4 on eth0, web servers IPs are 10.1.1.1 to 10.1.1.10
on eth1):
.IP
.nf
\f[C]
ipv4\ synproxy\ input\ inface\ eth0\ \\
\ \ \ \ dst\ 1.2.3.4\ dport\ 80\ dnat\ to\ 10.1.1.1\-10.1.1.10\ persistent

router\ wan2lan\ inface\ eth0\ outface\ eth1
\ \ \ \ server\ http\ accept\ dst\ 10.1.1.1\-10.1.1.10
\f[]
.fi
.PP
The above configuration is a load balancer.
Requests towards 1.2.3.4 port 80 will be distributed to the 10 web
servers with persistence (each client will always see one of them).
.PP
Catch all traffic towards SSH port tcp/22 and send it to
\f[C]TRAP_AND_DROP\f[] as explained in Working With
Traps (Working-with-traps).
At the same time, allow SSH on port tcp/2200 (without altering the ssh
server):
.IP
.nf
\f[C]
\ #\ definition\ of\ action\ TRAP_AND_DROP
\ ipv4\ action\ TRAP_AND_DROP\ sockets_suspects_trap\ 3600\ 86400\ 1\ src\ not\ "${UNROUTABLE_IPS}"\ next\ action\ DROP

\ #\ send\ ssh\ traffic\ to\ TRAP_AND_DROP
\ ipv4\ synproxy\ input\ inface\ eth0\ dst\ 1.2.3.4\ dport\ 22\ action\ TRAP_AND_DROP

\ #\ accept\ ssh\ traffic\ on\ tcp/2200
\ ipv4\ synproxy\ input\ inface\ eth0\ dst\ 1.2.3.4\ dport\ 2200\ redirect\ to\ 22

\ interface\ eth0\ wan
\ \ \ \ server\ ssh\ accept
\f[]
.fi
.SH SEE ALSO
.IP \[bu] 2
firehol(1) \- FireHOL program
.IP \[bu] 2
firehol.conf(5) \- FireHOL configuration
.IP \[bu] 2
firehol\-interface(5) \- interface definition
.IP \[bu] 2
firehol\-router(5) \- router definition
.IP \[bu] 2
firehol\-params(5) \- optional rule parameters
.IP \[bu] 2
firehol\-masquerade(5) \- masquerade helper
.IP \[bu] 2
FireHOL Website (http://firehol.org/)
.IP \[bu] 2
FireHOL Online PDF Manual (http://firehol.org/firehol-manual.pdf)
.IP \[bu] 2
FireHOL Online Documentation (http://firehol.org/documentation/)
.IP \[bu] 2
NAT
HOWTO (http://www.netfilter.org/documentation/HOWTO/NAT-HOWTO-6.html)
.IP \[bu] 2
netfilter flow
diagram (http://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg)
.SH AUTHORS
FireHOL Team.
